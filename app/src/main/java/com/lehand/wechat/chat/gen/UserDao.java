package com.lehand.wechat.chat.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lehand.wechat.chat.model.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Hxid = new Property(0, String.class, "hxid", true, "HXID");
        public final static Property UesrName = new Property(1, String.class, "uesrName", false, "UESR_NAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property OrgNo = new Property(3, String.class, "orgNo", false, "ORG_NO");
        public final static Property OrgName = new Property(4, String.class, "orgName", false, "ORG_NAME");
        public final static Property CardNo = new Property(5, String.class, "cardNo", false, "CARD_NO");
        public final static Property QqNo = new Property(6, String.class, "qqNo", false, "QQ_NO");
        public final static Property WeixinNo = new Property(7, String.class, "weixinNo", false, "WEIXIN_NO");
        public final static Property Nick = new Property(8, String.class, "nick", false, "NICK");
        public final static Property Avatar = new Property(9, String.class, "avatar", false, "AVATAR");
        public final static Property Phone = new Property(10, String.class, "phone", false, "PHONE");
        public final static Property Sex = new Property(11, String.class, "sex", false, "SEX");
        public final static Property Email = new Property(12, String.class, "email", false, "EMAIL");
        public final static Property PostName = new Property(13, String.class, "postName", false, "POST_NAME");
        public final static Property Ext = new Property(14, String.class, "ext", false, "EXT");
        public final static Property Online = new Property(15, boolean.class, "online", false, "ONLINE");
        public final static Property MFlag = new Property(16, int.class, "mFlag", false, "M_FLAG");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"HXID\" TEXT PRIMARY KEY NOT NULL ," + // 0: hxid
                "\"UESR_NAME\" TEXT," + // 1: uesrName
                "\"PASSWORD\" TEXT," + // 2: password
                "\"ORG_NO\" TEXT," + // 3: orgNo
                "\"ORG_NAME\" TEXT," + // 4: orgName
                "\"CARD_NO\" TEXT," + // 5: cardNo
                "\"QQ_NO\" TEXT," + // 6: qqNo
                "\"WEIXIN_NO\" TEXT," + // 7: weixinNo
                "\"NICK\" TEXT," + // 8: nick
                "\"AVATAR\" TEXT," + // 9: avatar
                "\"PHONE\" TEXT," + // 10: phone
                "\"SEX\" TEXT," + // 11: sex
                "\"EMAIL\" TEXT," + // 12: email
                "\"POST_NAME\" TEXT," + // 13: postName
                "\"EXT\" TEXT," + // 14: ext
                "\"ONLINE\" INTEGER NOT NULL ," + // 15: online
                "\"M_FLAG\" INTEGER NOT NULL );"); // 16: mFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String hxid = entity.getHxid();
        if (hxid != null) {
            stmt.bindString(1, hxid);
        }
 
        String uesrName = entity.getUesrName();
        if (uesrName != null) {
            stmt.bindString(2, uesrName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String orgNo = entity.getOrgNo();
        if (orgNo != null) {
            stmt.bindString(4, orgNo);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(5, orgName);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(6, cardNo);
        }
 
        String qqNo = entity.getQqNo();
        if (qqNo != null) {
            stmt.bindString(7, qqNo);
        }
 
        String weixinNo = entity.getWeixinNo();
        if (weixinNo != null) {
            stmt.bindString(8, weixinNo);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(9, nick);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(10, avatar);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(12, sex);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(13, email);
        }
 
        String postName = entity.getPostName();
        if (postName != null) {
            stmt.bindString(14, postName);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(15, ext);
        }
        stmt.bindLong(16, entity.getOnline() ? 1L: 0L);
        stmt.bindLong(17, entity.getMFlag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String hxid = entity.getHxid();
        if (hxid != null) {
            stmt.bindString(1, hxid);
        }
 
        String uesrName = entity.getUesrName();
        if (uesrName != null) {
            stmt.bindString(2, uesrName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String orgNo = entity.getOrgNo();
        if (orgNo != null) {
            stmt.bindString(4, orgNo);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(5, orgName);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(6, cardNo);
        }
 
        String qqNo = entity.getQqNo();
        if (qqNo != null) {
            stmt.bindString(7, qqNo);
        }
 
        String weixinNo = entity.getWeixinNo();
        if (weixinNo != null) {
            stmt.bindString(8, weixinNo);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(9, nick);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(10, avatar);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(12, sex);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(13, email);
        }
 
        String postName = entity.getPostName();
        if (postName != null) {
            stmt.bindString(14, postName);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(15, ext);
        }
        stmt.bindLong(16, entity.getOnline() ? 1L: 0L);
        stmt.bindLong(17, entity.getMFlag());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // hxid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uesrName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orgNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // orgName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cardNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // qqNo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // weixinNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // nick
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // avatar
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // phone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sex
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // email
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // postName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ext
            cursor.getShort(offset + 15) != 0, // online
            cursor.getInt(offset + 16) // mFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setHxid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUesrName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrgNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrgName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCardNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQqNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWeixinNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNick(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAvatar(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSex(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEmail(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPostName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setExt(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOnline(cursor.getShort(offset + 15) != 0);
        entity.setMFlag(cursor.getInt(offset + 16));
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getHxid();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getHxid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
